#!/bin/bash

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_general()
{
    cat >&2 << EOF
Usage:
    $PROGNAME [ -h|--help ] | orgrepoinfo | orgrepos | orgteams | teammembers | teamrepos | userinfo

    Common options:
        -h --help                             Display a basic set of usage instructions
        -u --user <username>                  Defaults to \${USERNAME:-\$USER}
        -c --credentials <credentials_file>   File container key/value pairs for user=pwd 
 
    get info from GitHub

       orgRepos <org>             get the names of all repos in a given org
       orgRepoInfo <org> <repo>
       orgTeams <org>             get the names of all teams in a given org
       teammembers <teamId>       get the names of all members of given team
       teamrepos <teamid>
       userinfo  <user>
EOF
    return 1
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_orgRepoCollaborators()
{
    cat >&2 << EOF

Usage:
    $PROGNAME orgRepoCollaborators <org> <repo>
    
    get the names of all collaborators for a given repo in an org

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_orgRepoInfo()
{
    cat >&2 << EOF

Usage:
    $PROGNAME orgRepoInfo <org> <repo>
    
    get the names of all repos in a given org

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_orgRepos()
{
    cat >&2 << EOF

Usage:
    $PROGNAME orgRepos <org>
    
    get the names of all repos in a given org

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_orgTeams()
{
    cat >&2 << EOF

Usage:
    $PROGNAME orgTeams <org>
    
    get the names of all teams in a given org

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_teammembers()
{
    cat >&2 << EOF

Usage:
    $PROGNAME teammembers <org>
    
    get the names of all members of given team

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_teamRepos()
{
    cat >&2 << EOF

Usage:
    $PROGNAME teamRepos <teamId>
    
    get the names of all repos in a given org

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.helpFor_userinfo()
{
    cat >&2 << EOF

Usage:
    $PROGNAME userinfo <user>
    
    get the names of all repos in a given org

EOF
}

#----------------------------------------------------------------------------------------------
function github-utilities.cmdLineArgs()
{
    local argsCondition longOpts='' options shortOpts=''
    
    local -A opts=(['base']="$(pwd)")
    [ "${DEBUG:-0}" -ne 0 ] && opts['debug']=$DEBUG 

    while [ "${1:-}" ]; do
        case "${1,,}" in
            help|-h|--help)
                if [ "${opts['cmd']:-}" ]; then
                    if [ "${opts['cmd']}" = 'github-utilities.catalogIterator' ]; then
                        opts['oper']="${opts['oper']:17}"
                    else
                        opts['oper']="${opts['cmd']:17}"
                    fi
                    while [ $# -gt 0 ]; do
                        shift
                    done
                else
                    shift
                fi
                opts['cmd']='github-utilities.usage'
                appenv.results "$@"
                return 0;;

            -c|--credentials)
                [[ $# -le 2 || $2 = -* ]] && trap.die 'invalid arguments!'
                opts['credentials']="$2"
                shift 2;;

            --debug)
                opts['debug']=1
                shift;;

            -u|--user)
                [[ $# -le 2 || $2 = -* ]] && trap.die 'invalid arguments!'
                opts['user']="$2"
                shift 2;;

            orgrepocollaborators)
                opts['cmd']='github-utilities.orgrepocollaborators'
                opts['message']="get list of collaborators for a given repo within an org"
                argsCondition='$# -eq 2'
                shift;;
 
            orgrepoinfo)
                opts['cmd']='github-utilities.orgrepoinfo'
                opts['message']="get info a given repo within an org"
                argsCondition='$# -eq 2'
                shift;;
 
            orgrepos)
                opts['cmd']='github-utilities.orgrepos'
                opts['message']="list repos for a given org"
                argsCondition='$# -eq 1'
                shift;;
 
            orgteams)
                opts['cmd']='github-utilities.orgteams'
                opts['message']="list teams for a given org"
                argsCondition='$# -eq 1'
                shift;;
 
            teammembers)
                opts['cmd']='github-utilities.teammembers'
                opts['message']="list the members in a given team"
                argsCondition='$# -eq 1'
                shift;;
 
            teamrepos)
                opts['cmd']='github-utilities.teamrepos'
                opts['message']="list the members in a given team"
                argsCondition='$# -eq 1'
                shift;;
 
            userinfo)
                opts['cmd']='github-utilities.userinfo'
                opts['message']="list the members in a given team"
                argsCondition='$# -eq 1'
                shift;;
 
            *)
                break;;
        esac
    done


    [ -z "${opts['cmd']:-}" ] && github-utilities.helpFor_general


    # Parse command-line options
    if [ "${longOpts:-}" ] && [ "${shortOpts:-}" ]; then
        options=$(getopt --longoptions "$longOpts" --options "$shortOpts" --name "$PROGNAME" -- "$@") || docker-utilities.usage '' $?
        eval set -- "$options"


        while [ "${1:-}" ]; do
            case "${1,,}" in
                -b|--b|--base)
                    [[ $# -le 2 || $2 = -* ]] && trap.die 'invalid arguments!'
                    opts['base']="$2"
                    shift 2
                    ;;

                --)
                    shift
                    break
                    ;;

                *)
                    break
                    ;;

            esac
        done
    fi

    # show args
    if [ "${opts['debug']:-0}" -gt 0 ]; then
        {
            for i in "${!opts[@]}"; do
               printf '%s: %s\n' "$i" "${opts[$i]}"
            done
            echo 'args:'
            for i in "$@"; do
               printf '   %s\n' "$i"
            done
            echo
        } >&2
    fi


    if [ ${argsCondition:-} ]; then
        $(eval "[[ $argsCondition ]]") || trap.die 'invalid arguments!'
    fi

    appenv.results "$@"

    [ -z "${opts['message']:-}" ] || term.elog "${opts['message']} : $*"'\n' 'grey'
    return 0
}

#----------------------------------------------------------------------------------------------
function github-utilities.orgrepocollaborators()
{
    local -r org="${1:?}"
    local -r repo="${2:?}"

    github.repoCollaborators "$org" "$repo"
}

#----------------------------------------------------------------------------------------------
function github-utilities.orgrepoinfo()
{
    local -r org="${1:?}"
    local -r repo="${2:?}"

    github.orgRepoInfo "$org" "$repo"
}

#----------------------------------------------------------------------------------------------
function github-utilities.orgrepos()
{
    local -r org="${1:?}"

    github.orgRepos "$org"
}

#----------------------------------------------------------------------------------------------
function github-utilities.orgteams()
{
    local -r org="${1:?}"

    github.orgTeams "$org"
}

#----------------------------------------------------------------------------------------------
function github-utilities.teammembers()
{
    local -ri teamId="${1:?}"

    github.teamMembers "$teamId"
}

#----------------------------------------------------------------------------------------------
function github-utilities.teamrepos()
{
    local -ri teamId="${1:?}"

    github.teamRepos "$teamId"
}

#----------------------------------------------------------------------------------------------
function github-utilities.userinfo()
{
    local -r user="${1:?}"

    github.userInfo "$user"
}

#----------------------------------------------------------------------------------------------
function github-utilities.main()
{
    # define our 'GLOBALS'
    declare -A OPTS=()

    # extract out options, and handle the common options
    eval "OPTS=( $1 )"
    readonly OPTS
    shift
    [ "${OPTS['cmd']:-}" ] || trap.die 'invalid arguments' 
 
    {
        echo "Starting process $$ at $(TZ=New_York date)"
        echo "user: ${OPTS['user']}"
    }  >&2

    [ "${OPTS['credentials']:-}" ] && __SECRETS_FILE="${OPTS['credentials']}"
    if [ "${OPTS['user']:-}" ]; then
        export USERNAME="${OPTS['user']}"
        export USER="${OPTS['user']}"

        export _GITHUB_USER="${OPTS['user']}"
        export _GITHUB_CREDENTIALS=$(credentials.get github)
    fi
 


    # perform what was asked
    if [ "${OPTS['debug']:-0}" -ne 0 ]; then
        echo "cmd:    ${OPTS['cmd']:-}" >&2
        echo "oper:   ${OPTS['oper']:-}" >&2
        echo "action: ${OPTS['action']:-}" >&2
    fi

    local status=0
    if [ -z "${OPTS['log']:-}" ]; then

        # regular output
        "${OPTS['cmd']}" ${OPTS['oper']:-} "$@" && status=$? || status=$?

    else
        # redirect output so we have a filtered version going to log file, and unfiltered version to console (for colors)

        # always create a log file for 
        :>"${OPTS['log']}"
        # create special stdout/stderr (which always receives encoded output)
        exec 3>&1
        (
            # run command & combine stdout + stderr
            # |  split output to fd3 (console copy) & console
            # |  filter out color
            # >>  redirect filtered console to log
            "${OPTS['cmd']}" ${OPTS['oper']:-} "$@" 2>&1 \
              | tee /dev/fd/3 \
              | stdbuf -oL sed -E 's|\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]||g' \
              >> "${OPTS['log']}"
        ) && status=$? || status=$?
        # close special stdout/stderr
        exec 3>&-

    fi
    return "$status"
}

#----------------------------------------------------------------------------------------------
function github-utilities.orgInfo_Devops()
{
    local org repoId repoName teamId teamName line
    local -i status
    echo "Starting process $$ at $(TZ=New_York date)"

    local loc='.'
    while read -r org; do
        (github.orgRepos "$org" > "${loc}/${org}/repos.json") && status=$? || status=$?
        (github.orgTeams "$org" > "${loc}/${org}/teams.json") && status=$? || status=$?
    done < "${PROGRAM_DIR}/devops_orgs.git"
    echo
}

#----------------------------------------------------------------------------------------------
function github-utilities.orgInfo_MRES()
{
    local org repoId repoName teamId teamName line
    local -i status

    local loc='.'
    while read -r org; do
        mkdir -p "${loc}/${org}" ||:
        (github.orgRepos "$org" > "${loc}/${org}/repos.json") && status=$? || status=$?
        while read -r line; do
            repoId="${line%%,*}"
            repoName="${line#*, }"
            (github.orgRepoInfo "$org" "$repoName" > "${loc}/${org}/repos.${repoName}.info.json") && status=$? || status=$?
            (github.repoCollaborators "$org" "$repoName" > "${loc}/${org}/repos.${repoName}.collaborators.json") && status=$? || status=$?
        done < <(jq -r '.[]|"\(.id), \(.name)"' "${loc}/${org}/repos.json")

        (github.orgTeams "$org" > "${loc}/${org}/teams.json") && status=$? || status=$?
        while read -r line; do
            teamId="${line%%,*}"
            teamName="${line#*, }"
            (github.teamMembers "$teamId" > "${loc}/${org}/repos.${teamName}.members.json") && status=$? || status=$?
            (github.teamRepos "$teamId" > "${loc}/${org}/repos.${teamName}.repos.json") && status=$? || status=$?
        done < <(jq -r '.[]|"\(.id), \(.name)"' "${loc}/${org}/teams.json")
    done < "${PROGRAM_DIR}/mrs_orgs.git"

    github-utilities.process_files "$loc"
    echo
}

#----------------------------------------------------------------------------------------------
function github-utilities.process_files()
{
    local pwd="${1:?}"
    local -A DATA=(['collaborators']="id login site_admin type permissions.admin permissions.push permissions.pull"
                   ['members']="id login site_admin type"
                   ['repos']="id name owner.type owner.site_admin private description fork size archived default_branch permissions.admin permissions.push permissions.pull full_name"
                   ['teams']="id name slug description privacy permission"
                  )

    while read -r dir; do
        local org="$(basename "$dir")"
        for objtype in "${!DATA[@]}"; do
            # verify there are files to process
            local -a files
            mapfile -t files < <(find "${dir}" -mindepth 1 -maxdepth 1 -name "*.${objtype}.json" ||:)
            [ "${#files[*]}" -eq 0 ] && continue

            local -a exp
            mapfile -t exp < <(awk '{print $0}' RS=' ' <<< ${DATA[$objtype]} ||:)
            local last=$(( ${#exp[@]} - 1 ))
            for (( i=0; i<"${#exp[@]}"; i++ ));do
                [ -z "${exp[i]:-}" ] && continue
                if [ $i -eq $last ]; then
                    exp[i]='\(.'${exp[i]}')'
                else
                    exp[i]='\(.'${exp[i]}'),'
                fi
            done

            local logfile="${pwd}/${org}.${objtype}.csv"
            :> "$logfile"
            local jexp='.[]|"'"${org}${objtype},$(basename "$file"),${exp[*]}"'"'
            for file in "${files[@]}"; do
                jq -r "$jexp" "$file" >> "$logfile"
            done
        done
    done < <(find "$pwd" -mindepth 1 -maxdepth 1 -type d)
}

#----------------------------------------------------------------------------------------------
function github-utilities.usage()
{
    local -r context="${1:-help}"
    local -ir exit_status="${2:-127}"

    local -A contextHelp=( ['clean']=github-utilities.helpFor_clean
                           ['delete']=github-utilities.helpFor_delete
                           ['orgrepos']=github-utilities.helpFor_orgRepos
                           ['orgrepoinfo']=github-utilities.orgrepoinfo
                           ['orgteams']=github-utilities.helpFor_orgTeams
                           ['orgrepocollaborators']=github-utilities.orgRepoCollaborators
                           ['teammembers']=github-utilities.teammembers
                           ['teammrepos']=github-utilities.teamrepos
                           ['userinfo']=github-utilities.userinfo
                         )

    # show context sensitive help
    ${contextHelp[${context,,}]:-github-utilities.helpFor_general}
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
#
#      MAIN
#
#----------------------------------------------------------------------------------------------

declare -i start=$(date '+%s')
declare -r PROGNAME="$( basename "${BASH_SOURCE[0]}" )"
declare -r PROGRAM_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"


declare -r loader="${PROGRAM_DIR}/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries' >&2
    exit 1
fi
source "$loader"
appenv.loader 'github-utilities.main'

#lib.checkAppVersion 'docker-compose' '1.18.0'
#lib.checkAppVersion 'docker' '17.12.0'
#lib.checkAppVersion 'jq' '1.5'
#lib.checkAppVersion 'curl' '7.40.0'


declare -i status=0
declare -a args
args=( $( github-utilities.cmdLineArgs "$@" ) ) && status=$? || status=$?
[ $status -ne 0 ] || github-utilities.main "${args[@]:-}" && status=$? || status=$?

declare -i elapsed=$(( $(date '+%s') - start ))
[ $elapsed -gt 1 ] && printf '\nElapsed time: %s\n' $(timer.fmtElapsed $elapsed) >&2

exit $status
