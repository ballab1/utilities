#!/bin/bash

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_general()
{
    cat >&2 << EOF

Various operations with Artifactory.

Usage:
    $PROGNAME [ help [ subcommand ]
              | deleteArtifacts    <artifact> [ <artifact> [ <artifact> ]...]
              | deleteDockerImages <aqlFile> [  <aqlFile> [  <aqlFile> ]...]
              | getArtifacts    <artifact> [ <artifact> [ <artifact> ]...]
              | listRepos
              | saveArtifact 
                   -f --file <filename>   Name of file to upload
                   -r --repo <reponame>   Name of repository. 
                                          This is the folder where the artifact will be stored. No checks for duplicates are performed
                                          inside $(artifactory.SERVER)
              | saveCBF               
              | search <aqlFile>

Common options:
    -u --user <username>                  Defaults to \${USERNAME:-\$USER}                  
    -c --credentials <credentials_file>   File containing key/value pairs for user=pwd

Commands:
    help                  Display a basic set of usage instructions
    deleteArtifacts       Delete one or more artifacts, where <artifact> is its name  
    deleteDockerImages    Delete one or more tags - see 'usage examples'
    getArtifacts          Get one or more artifacts, where <artifact> is its name  
    listRepos             List repositories
    saveArtifact          Save an Artifact to a specified repository
    saveCBF               Save CBF to Artifactory
    search                Display the manifest for an image

EOF
    return 1
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_deleteArtifacts()
{
    cat >&2 << EOF

    Delete one or more artifacts, where <artifact> is its name  

 examples of Artifactory artifact definitions

 specific CBF versions:
    cyclone-devops-mw/cyclone-devops/container_build_framework/v3.1-1-g62e4fad.tar.gz
    cyclone-devops-mw/cyclone-devops/container_build_framework/v3.1-2-ge6e068c.tar.gz
    cyclone-devops-mw/cyclone-devops/container_build_framework/v3.1-2-gfc1d30a.tar.gz
  specific files:
    cyclone-devops-mw/cyclone-devops/cyclone-devops/cyclone-devops/cpan/cpanimus/app-cpanimus.1.7044.pm
    cyclone-devops-mw/cyclone-devops/cyclone-devops/cyclone-devops/cpan/app-cpanimus.1.7044.pm
    cyclone-devops-mw/cyclone-devops/cyclone-devops/cyclone-devops/perl-carton/app-cpanimus.1.7044.pm
  specify folders:
    cyclone-devops-mw/cyclone-devops/cyclone-devops
    cyclone-devops-mw/cyclone-devops/phpMyAdmin
    cyclone-devops-mw/cyclone-devops/nginx
  specify docker images:
    cyclone-dockerv2-local/devops/alpine/nginx-base/1.15.4/latest
    cyclone-dockerv2-local/devops/alpine/nginx-base/1.15.4/8aeabe99ace35f4eae9b01f30e91c726daa38f60a1ecf0aa3fb6d32dedd1e42b
    cyclone-dockerv2-local/devops/alpine/nagios/4.4.2/latest
    cyclone-dockerv2-local/devops/alpine/nagios/4.4.2/f6cec2d3ae004c570d8633a16d7ead32e7d308014f40d6c6f1f0d0c31276a433

 crrently 'in use' artifacts:
  cyclone-devops/cyclone-devops/container_build_framework/v3.1-2-gd585ce1.tar.gz
  cyclone-devops-mw/cyclone-devops/container_build_framework/v3.1-2-gdca205f.tar.gz

EOF
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_deleteDockerImages()
{
    cat >&2 << EOF

    Delete one or more artifacts, where <artifact> is its name  

EOF
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_getArtifacts()
{
    cat >&2 << EOF

    Get one or more artifacts, where <artifact> is its name  
EOF
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_listRepositories()
{
    cat >&2 << EOF

    list sub-repos in Artifactory based on an artifactory search

EOF
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_saveArtifact()
{
    cat >&2 << EOF

Upload an Artifact to the devops area in Artifactory 

Usage:

    Common options:
        -f --file <filename>   Name of file to upload
        -r --repo <reponame>   Name of repository. This is the folder inside https://afeoscyc-mw.cec.lab.emc.com/artifactory/cyclone-devops/cyclone-devops
                               where the artifact will be stored. No checks for duplicates are performed

EOF
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_saveCBF()
{
    cat >&2 << EOF

    Upload container_build_framework directory to Artifactory 

EOF
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.helpFor_search()
{
    cat >&2 << EOF

    perform an artifactory search

EOF
}

#----------------------------------------------------------------------------------------------
#----------------------------------------------------------------------------------------------
function artifactory-utilities.cleanUpOnExit()
{
    [ "${TMP_DIR:-}" ] && [ "${TMP_DIR:-}" != '/' ] && [ -e "${TMP_DIR:-}" ] && rm -rf "${TMP_DIR:-}"
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.cmdLineArgs()
{
    local argsCondition longOpts='' options shortOpts=''
    
    local -A opts=(['user']=svc_cyclonebuild
                   ['credentials']=~/.inf/secret.properties
                  )
    [ ${DEBUG:-0} -ne 0 ] && opts['debug']=$DEBUG

    while [ "${1:-}" ]; do
        case "${1,,}" in
            help|-h|--help)
                if [ "${opts['cmd']:-}" ]; then
                    if [ "${opts['cmd']}" = 'artifactory-utilities.catalogIterator' ]; then
                        opts['oper']="${opts['oper']:22}"
                    else
                        opts['oper']="${opts['cmd']:22}"
                    fi
                    while [ $# -gt 0 ]; do
                        shift
                    done
                else
                    shift
                fi
                opts['cmd']='artifactory-utilities.usage'
                appenv.results "$@"
                return 0;;

            -c|--credentials)
                [[ $# -le 2 || $2 = -* ]] && trap.die 'invalid arguments!'
                opts['credentials']="$2"
                shift 2;;

            --debug)
                opts['debug']=1
                shift;;

            -u|--user)
                [[ $# -le 2 || $2 = -* ]] && trap.die 'invalid arguments!'
                opts['user']="$2"
                shift 2;;

            deleteartifacts)
                opts['cmd']='artifactory-utilities.deleteArtifacts'
                opts['message']="delete artifacts from $(registry.SERVER)"
                argsCondition='$# -gt 0'
                shift;;

            deletedockerimages)
                opts['cmd']='artifactory-utilities.performDelete'
                opts['message']="delete docker images from $(registry.SERVER)"
                longOpts='mode'
                shortOpts='m'
                argsCondition='$# -eq 1'
                shift;;

            getartifacts)
                opts['cmd']='artifactory-utilities.getArtifacts'
                opts['message']="get artifacts from $(registry.SERVER)"
                argsCondition='$# -gt 0'
                shift;;

            listrepos)
                opts['cmd']='artifactory-utilities.listRepos'
                opts['message']="list top level repos on $(registry.SERVER)"
                argsCondition='$# -eq 0'
                shift;;

            saveartifact)
                opts['cmd']='artifactory-utilities.saveArtifact'
                opts['message']="save an artifact to a repo on $(artifactory.SERVER)"
                longOpts='file:,repo:'
                shortOpts='f:r:'
                argsCondition='$# -eq 0'
                shift;;

            savecbf)
                opts['cmd']='artifactory-utilities.saveCBF'
                opts['message']="save 'Container_build_framework' directory to $(artifactory.SERVER)"
                argsCondition='$# -eq 0'
                shift;;

            search)
                opts['cmd']='artifactory-utilities.search'
                opts['message']="search for artifacts in $(artifactory.SERVER)"
                longOpts='mode'
                shortOpts='m'
                argsCondition='$# -eq 1'
                shift;;

            *)
                break;;
        esac
    done

    [ -z "${opts['cmd']:-}" ] && artifactory-utilities.helpFor_general


    # Parse command-line options
    if [ "${longOpts:-}" ] && [ "${shortOpts:-}" ]; then
        options=$(getopt --longoptions "$longOpts" --options "$shortOpts" --name "$PROGNAME" -- "$@") || docker-utilities.usage '' $?
        eval set -- "$options"


        while [ "${1:-}" ]; do
            case "${1,,}" in
                -f|--f|--file)
                    [[ $# -eq 0 || $2 = -* ]] && trap.die 'invalid arguments!'
                    opts['file']=$2
                    shift 2;;

                -m|--m|--mode)
                    [[ $# -eq 0 || $2 = -* ]] && trap.die 'invalid arguments!'
                    opts['delete_mode']="$2"
                    shift 2
                    ;;

                -o|--o|--outfile)
                    [[ $# -eq 0 || $2 = -* ]] && trap.die 'invalid arguments!'
                    opts['log']="$2"
                    shift 2
                    ;;

                -r|--r|--repo)
                    [[ $# -eq 0 || $2 = -* ]] && trap.die 'invalid arguments!'
                    opts['repo']=$2
                    shift 2
                    ;;

                --)
                    shift
                    break
                    ;;

                *)
                    break
                    ;;

            esac
        done
    fi

    # show args
    if [ ${opts['debug']:-0} -gt 0 ]; then
        {
            for i in "${!opts[@]}"; do
               printf '%s: %s\n' $i "${opts[$i]}"
            done
            echo 'args:'
            for i in "$@"; do
               printf '   %s\n' "$i"
            done
            echo
        } >&2
    fi

    if [ "${argsCondition:-}" ]; then
        eval "[[ $argsCondition ]]" || trap.die 'invalid arguments!'
    fi
    appenv.results "$@"
    return 0
}

#--------------------------------------------------------------------
function artifactory-utilities.deleteArtifacts()
{
    artifactory.deleteArtifact "$@" || return $? 
}

#--------------------------------------------------------------------
function artifactory-utilities.deleteDockerImages()
{
    [ "${OPTS['delete_mode']:-}" = registry ] || OPTS['delete_mode']=artifactory

    echo "Found $#* images to remove"
    for item in "$@"; do
        echo
        echo "${item}..............................."
        case "${OPTS['delete_mode']:-}" in
            registry)
                registry.deleteImage "${item%/*}:${item##*/}";;

            artifactory)
                artifactory.deleteDockerImage "$item";;

            *)
                trap.die 'invalid option';;
        esac
    done
    return 0
}

#--------------------------------------------------------------------
function artifactory-utilities.getArtifacts()
{
    local ref;
    for ref in "$@"; do
        artifactory.GET "$ref" ||: 
    done
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.main()
{
    # define our 'GLOBALS'
    declare -A OPTS=()


    # extract out options, and handle the common options
    eval "OPTS=( $1 )"
    readonly OPTS
    shift
    [ "${OPTS['cmd']:-}" ] || trap.die 'invalid arguments' 


    [ "${OPTS['credentials']:-}" ] && __SECRETS_FILE="${OPTS['credentials']}"
    if [ "${OPTS['user']:-}" ]; then
        export _ARTIFACTORY_USER="${OPTS['user']}"
        export _ARTIFACTORY_CREDENTIALS=$(credentials.get artifactory)
        if [ "${OPTS['delete_mode']:-}" = registry ]; then
            export _REGISTRY_USER="${OPTS['user']}"
            export _REGISTRY_CREDENTIALS=$(credentials.get registry)
        fi
    fi
    export DEBUG=${OPTS['debug']:-0}

    {
        echo
        echo "Starting process $$ at $(TZ=New_York date)"
        if [ "${OPTS['user']:-}" ]; then
            echo "user:               ${OPTS['user']}"
        else
            echo "user:               ${USERNAME:-${USER:-}}"
        fi
    } >&2


    # perform what was asked
    if [ ${OPTS['debug']:-0} -ne 0 ]; then
        echo "cmd:    ${OPTS['cmd']:-}" >&2
        echo "oper:   ${OPTS['oper']:-}" >&2
        echo "action: ${OPTS['action']:-}" >&2
    fi


    local status=0
    if [ -z "${OPTS['log']:-}" ]; then

        # regular output
        "${OPTS['cmd']}" ${OPTS['oper']:-} "$@" && status=$? || status=$?

    else
        # redirect output so we have a filtered version going to log file, and unfiltered version to console (for colors)

        # always create a log file for 
        :>"${OPTS['log']}"
        # create special stdout/stderr (which always receives encoded output)
        exec 3>&1
        (
            # run command & combine stdout + stderr
            # |  split output to fd3 (console copy) & console
            # |  filter out color
            # >>  redirect filtered console to log
            "${OPTS['cmd']}" ${OPTS['oper']:-} "$@" 2>&1 \
              | tee /dev/fd/3 \
              | stdbuf -oL sed -E 's|\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[mGK]||g' \
              >> "${OPTS['log']}"
        ) && status=$? || status=$?
        # close special stdout/stderr
        exec 3>&-

    fi
    return $status
}

#--------------------------------------------------------------------
function artifactory-utilities.listRepos
{
    artifactory.GET "$(artifactory.REST_API)/repositories" 
}

#--------------------------------------------------------------------
function artifactory-utilities.performDelete
{
    local -r aqlfile="${OPTS['aql']}"

    local -a items=()
    mapfile -t items < <(artifactory.search "$aqlfile" | jq --compact-output --monochrome-output --raw-output '.results[].path?' ||:)
    [ ${#items[*]} -gt 0 ] || trap.die "no artifacts to delete"

    artifactory-utilities.deleteDockerImages "${items[@]}"
}

#--------------------------------------------------------------------
function artifactory-utilities.saveArtifact
{
    if [ $# -ne 0 ] || [ -z "${OPTS['file']}" ] || [ -z "${OPTS['repo']}" ]; then
        term.elog '\nERROR: invalid command options\n' 'error'
        exit 1
    fi

    [ -e "${OPTS['file']}" ] || trap.die "Specified file: '${OPTS['file']}' does not exist"
 
    # target is the folder in Artifactory where the artifact gets stored
    local target="${OPTS['repo']:-}"
    [ -z "${target:-}" ] && return 1

    # upload is the actual file to upload
    local uploadFile="${OPTS['file']:-}"
    [ -z "${uploadFile:-}" ] && return 1

    artifactory.uploadFile "${target}/$(basename "$uploadFile")"  "$uploadFile"
}

#--------------------------------------------------------------------
function artifactory-utilities.saveCBF
{
    [ ! -d container_build_framework ] && trap.die 'No framework directory located'
    [ ! -e container_build_framework/.git ] && trap.die 'CBF is not a git directory'

    local filename="$(cd container_build_framework; git describe --tags --dirty --always)"
    [[ "$filename" == *-dirty* ]] && trap.die 'Please commit CBF directory prior to uploading to Artifactory'

#    export DO_PUSH=0   # set to non-0 for dry-run
    [ ${DO_PUSH:-0} -eq 0 ] && trap artifactory-utilities.cleanUpOnExit EXIT 

    export TMP_DIR="$(mktemp -d)"
    artifactory.saveCBF "${filename}.tar.gz" "$TMP_DIR"
    echo
}

#--------------------------------------------------------------------
function artifactory-utilities.search()
{
    local aql="${1:?}"
    aql="$(artifactory-utilities.verifyAqlFile "$aql")"

    {
        echo
        echo 'artifactory.search:'
        while read -r line; do
            term.log '    '"$line"'\n' 'cyan'
        done < "$aql"
        echo
    } >&2

    artifactory.search "$aql"
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.usage()
{
    local -r context="${1:-help}"
    local -ir exit_status="${2:-127}"

    local -A contextHelp=( ['deletearetifacts']=artifactory-utilities.helpFor_deleteArtifacts
                           ['deletedockerimages']=artifactory-utilities.helpFor_deleteDockerImages
                           ['getaretifacts']=artifactory-utilities.helpFor_getArtifacts
                           ['listrepos']=artifactory-utilities.helpFor_listRepos
                           ['saveartifact']=artifactory-utilities.helpFor_saveArtifact
                           ['savecbf']=artifactory-utilities.helpFor_saveCBF
                           ['search']=artifactory-utilities.helpFor_search
                         )

    # show context sensitive help
    ${contextHelp[${context,,}]:-artifactory-utilities.helpFor_general}
    exit "$exit_status"
}

#----------------------------------------------------------------------------------------------
function artifactory-utilities.verifyAqlFile()
{
    local aqlFile="${1:?}"

    local path
    for path in '' "$(pwd)/searches/aql/" "$PROGRAM_DIR/searches/aql/"; do
        if [ -e "${path}$aqlFile" ]; then
            aqlFile="$(readlink -f "${path}$aqlFile")"
            break
        fi
        if [ -e "${path}${aqlFile}.aql" ]; then
            aqlFile="$(readlink -f "${path}${aqlFile}.aql")"
            break
        fi
    done
    

    [ -e "$aqlFile" ] || trap.die "unable to locate AQL file: '$aqlFile'"
    echo "$aqlFile"
    return 0
}


#----------------------------------------------------------------------------------------------
#
#      MAIN
#
#----------------------------------------------------------------------------------------------

declare -i start=$(date '+%s')
declare -r PROGNAME="$( basename "${BASH_SOURCE[0]}" )"
declare -r PROGRAM_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"


declare -r loader="${PROGRAM_DIR}/appenv.bashlib"
if [ ! -e "$loader" ]; then
    echo 'Unable to load libraries' >&2
    exit 1
fi
source "$loader"
appenv.loader 'artifactory.search'


#lib.checkAppVersion 'docker-compose' '1.18.0'
#lib.checkAppVersion 'docker' '17.12.0'
#lib.checkAppVersion 'jq' '1.5'
#lib.checkAppVersion 'curl' '7.40.0'


declare -i status=0
declare -a args
args=( $( artifactory-utilities.cmdLineArgs "$@" ) ) && status=$? || status=$?
[ $status -ne 0 ] || artifactory-utilities.main "${args[@]:-}" && status=$? || status=$?

declare -i elapsed=$(( $(date '+%s') - start ))
[ $elapsed -gt 1 ] && printf '\nElapsed time: %s\n' $(timer.fmtElapsed $elapsed) >&2

exit $status